{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "siteName": {
            "type": "string",
            "metadata": {
                "description": "Name of the site into which the function should be deployed"
            }
        },
        "functionName": {
            "type": "string",
            "metadata": {
                "description": "name of the function"
            },
            "defaultValue": "AutomateLogListener"
        },
        "logAnalyticsWorkspaceID": {
            "type": "string",
            "metadata": {
                "description": "The workspace ID to use when adding data to Log Analytics"
            }
        },
        "logAnalyticsSharedKey": {
            "type": "securestring",
            "metadata": {
                "description": "Primary key to use for authentication to Log Analytics"
            }
        },
        "automateFqdn": {
            "type": "string",
            "metadata": {
                "description": "FQDN of the Automate server. This is used to build up the URL from which to get stats"
            }
        }
    },
    "variables": {
        "name": {
            "site": "[parameters('siteName')]",
            "function": "[parameters('functionName')]"
        },
        "apiVersions": {
            "functions": "2016-08-01"
        },
        "code": {
            "run_csx": "",
            "constants_csx": "c3RhdGljIHN0cmluZyBQYXJ0aXRpb25LZXkgPSAiQ2hlZkFNQSI7DQpzdGF0aWMgc3RyaW5nIEF1dG9tYXRlVG9rZW5LZXlOYW1lID0gImF1dG9tYXRlX3Rva2VuIjs="
        },
        "logAnalytics": {
            "workspace_id": "[parameters('logAnalyticsWorkspaceId')]",
            "shared_key": "[parameters('logAnalyticsSharedKey')]"
        },
        "automate": {
            "fqdn": "[variables('automate').fqdn]"
        }
    },
    "resources": [
        {
            "type": "Microsoft.Web/sites/functions",
            "name": "[concat(variables('name').site, '/', variables('name').function)]",
            "apiVersion": "[variables('apiVersions').functions]",
            "properties": {
                "config": {
                    "bindings": [
                        {
                            "name": "myTimer",
                            "type": "timerTrigger",
                            "direction": "in",
                            "schedule": "0 */5 * * * *"
                        },
                        {
                            "type": "table",
                            "name": "settingTable",
                            "tableName": "settings",
                            "take": 50,
                            "connection": "AzureWebJobsDashboard",
                            "direction": "in"
                        }
                    ],
                    "disabled": false
                },
                "files": {
                    "run.csx": "[base64ToString(variables('code').run_csx)]",
                    "constants.csx": "[base64ToString(variables('code').constants_csx)]",
                    "workspace.csx": "[concat('static string customerId = \"', variables('logAnalytics').workspace_id, '\";\nstatic string shareKey = \"', variables('logAnalytics').shared_key, '\";\nstatic string automate_fqdn = \"', variables('automate').fqdn, '\";')]"
                }
            }
        }
    ],
    "outputs": {
        "apiKey": {
            "type": "string",
            "value": "[listsecrets(resourceId('Microsoft.Web/sites/functions', variables('name').site, variables('name').function), '2016-08-01').key]"
        }
    }
}